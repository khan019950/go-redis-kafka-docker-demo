version: '2.2'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - go-demo-internal
  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "number:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092
      KAFKA_LISTENERS: INTERNAL://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - ./kafka/data:/var/lib/kafka/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - go-demo-internal
  redis:
    image: "redis:alpine"
    hostname: redis
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - go-demo-internal
    volumes:
      - ./redis/data:/data

  go-server:
    image: go-redis-kafka-demo:1.0-alpine
    hostname: go-server
    container_name: go-server
    restart: always
    ports:
      - "8080:8080"
    environment:
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ""
      KAFKA_HOST: "kafka"
      KAFKA_PORT: "9092"
      KAFKA_TOPIC: "numbers"
      KAFKA_CONSUMER_GROUP: "numbers-group"
      HTTP_SERVER_PORT: "8080"
      HTTP_SERVER_TIMEOUT: "10000"
    depends_on:
      - kafka
      - redis
    networks:
      - go-demo-bridge
      - go-demo-internal
networks:
  go-demo-bridge:
    driver: bridge
  go-demo-internal:
    internal: true